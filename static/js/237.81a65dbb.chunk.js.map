{"version":3,"file":"static/js/237.81a65dbb.chunk.js","mappings":"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","sources":["components/NetworkGraph.js","details/File5.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nimport convertDataToNodeAndLinks from \"./convertDataToNodeAndLinks\"\r\n\r\n// export const RADIUS = 10;\r\n\r\nconst NetworkGraph = ({ nodes, links }) => {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    //const { nodes, links } = convertDataToNodeAndLinks(data);\r\n\r\n    console.log(\"NODES\", nodes)\r\n    console.log(\"LINKS\", links)\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    const width = svg.attr('width');\r\n    const height = svg.attr('height');\r\n\r\n    const simulation = d3.forceSimulation(nodes)\r\n      .force('link', d3.forceLink(links).id(d => d.id))\r\n    //   .force('collide', d3.forceCollide().radius(RADIUS))\r\n      .force('charge', d3.forceManyBody())\r\n      .force('center', d3.forceCenter(width / 2, height / 2));\r\n\r\n    const link = svg.append('g')\r\n      .selectAll('line')\r\n      .data(links)\r\n      .enter().append('line')\r\n      .attr('stroke', '#999')\r\n      .attr('stroke-opacity', 0.6);\r\n\r\n    const node = svg.append('g')\r\n      .selectAll('circle')\r\n      .data(nodes)\r\n      .enter().append('circle')\r\n      .attr('r', 5)\r\n      .attr('fill', '#69b3a2')\r\n      .call(d3.drag()\r\n        .on('start', dragstarted)\r\n        .on('drag', dragged)\r\n        .on('end', dragended));\r\n\r\n    node.append('title')\r\n      .text(d => d.id);\r\n\r\n    simulation.on('tick', () => {\r\n      link\r\n        .attr('x1', d => d.source.x)\r\n        .attr('y1', d => d.source.y)\r\n        .attr('x2', d => d.target.x)\r\n        .attr('y2', d => d.target.y);\r\n\r\n      node\r\n        .attr('cx', d => d.x)\r\n        .attr('cy', d => d.y);\r\n    });\r\n\r\n    function dragstarted(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      d.fx = event.x;\r\n      d.fy = event.y;\r\n    }\r\n\r\n    function dragended(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    }\r\n\r\n    return () => {\r\n      svg.selectAll('*').remove();\r\n    };\r\n  }, [nodes, links]);\r\n\r\n  return <svg ref={svgRef} width={600} height={600} />;\r\n};\r\n\r\nexport default NetworkGraph;\r\n","// src/details/File5.js\r\nimport { useState, useEffect } from 'react';\r\nimport { Tab, Tabs, Row, Col } from 'react-bootstrap';\r\nimport DataTable from 'react-data-table-component';\r\nimport { Switch, FormControlLabel, FormGroup, Slider, Typography, Button, ButtonGroup } from '@mui/material';\r\nimport Papa from 'papaparse';\r\n\r\nimport NetworkGraph from '../components/NetworkGraph';\r\n\r\nconst File5 = () => {\r\n\r\n    const marks = [\r\n        { value: 0, label: '0' },\r\n        { value: 0.25, label: '0.25' },\r\n        { value: 0.5, label: '0.5' },\r\n        { value: 0.75, label: '0.75' },\r\n        { value: 1, label: '1' },\r\n      ];\r\n\r\n    const buttons = [\r\n        <Button key=\"graph\">Graph</Button>,\r\n        <Button key=\"sankey\">Sankey</Button>,\r\n        <Button key=\"edgeBunding\">Edge Bundling</Button>,\r\n    ];  \r\n\r\n    // Function to calculate the mean of all values in a 2D array\r\n    const calculateMean = (data) => {\r\n        // Extract float values from the objects\r\n        const floatValues = data.flatMap(obj => {\r\n            return Object.values(obj).map(value => parseFloat(value));\r\n        });\r\n\r\n        // Filter out NaN values in case of any parsing issues\r\n        const validFloatValues = floatValues.filter(value => !isNaN(value));\r\n\r\n        // Calculate the total sum of the float values\r\n        const total = validFloatValues.reduce((sum, value) => sum + value, 0);\r\n\r\n        // Calculate and return the mean\r\n        return total / validFloatValues.length;\r\n    };\r\n\r\n    // Function to apply the threshold logic\r\n    const applyThreshold = (data, threshold) => {\r\n        return data.map(item => {\r\n            const updatedItem = {};\r\n            for (const key in item) {\r\n              updatedItem[key] = item[key] > threshold ? 1 : 0;\r\n            }\r\n            return updatedItem;\r\n          });\r\n    };\r\n\r\n    const [key, setKey] = useState('detail');\r\n    const [cellThreshold, setCellThreshold] = useState(0);\r\n    const [columnNames, setColumnNames] = useState([]);\r\n    const [cellCorrelation, setCellCorrelation] = useState([]);\r\n    const [filteredCellCorrelation, setFilteredCellCorrelation] = useState([]);\r\n    //const [nodes, setNodes] = useState([]);\r\n    //const [links, setLinks] = useState({});\r\n\r\n    useEffect(() => {\r\n        fetch('/Covid19_datastructure/data/celltype_correlation.csv')\r\n            .then((response) => response.text())\r\n            .then((text) => {\r\n                Papa.parse(text, {\r\n                    header: true,\r\n                    skipEmptyLines: true,\r\n                    complete: (results) => {\r\n                        const parsedData = results.data.map(row => {\r\n                            const convertedRow = {};\r\n                            for (const key in row) {\r\n                                const value = row[key];\r\n                                if (!isNaN(value) && value.trim() !== '') {\r\n                                  convertedRow[key] = parseFloat(value).toFixed(4);\r\n                                } else {\r\n                                  convertedRow[key] = value;\r\n                                }\r\n                            }\r\n                            return convertedRow;\r\n                          });\r\n\r\n                        setCellCorrelation(parsedData);\r\n                        \r\n                    },\r\n                });\r\n            });\r\n    }, []);\r\n\r\n    const columns = cellCorrelation.length > 0 ? Object.keys(cellCorrelation[0]).map(header => ({\r\n        name: header,\r\n        selector: row => row[header],\r\n        sortable: true,\r\n    })) : [];\r\n\r\n    useEffect(() => {\r\n        setCellThreshold(calculateMean(cellCorrelation))\r\n        setColumnNames(cellCorrelation.length > 0 ? Object.keys(cellCorrelation[0]).map(header => header): [])\r\n        setFilteredCellCorrelation(applyThreshold(cellCorrelation, cellThreshold));\r\n    }, [cellThreshold, cellCorrelation]);\r\n\r\n    console.log(Array.isArray(cellCorrelation));\r\n    console.log(cellCorrelation);\r\n    console.log(\"Cell Threshold\", cellThreshold);\r\n    console.log(\"Column\", columns);\r\n    console.log(Array.isArray(columns));\r\n    console.log(\"columnNames\", columnNames);\r\n    console.log(filteredCellCorrelation);\r\n    const filteredColnames = filteredCellCorrelation.length > 0 ? Object.keys(filteredCellCorrelation[0]).map(header => header): []\r\n    console.log(\"Filtered colnames\", filteredColnames)\r\n\r\n    //useEffect(() => {\r\n        const nodes = filteredCellCorrelation.length > 0 ? Object.keys(filteredCellCorrelation[0]).map(item => ({ id: item, group: 'group1' })):[]\r\n        //setNodes(nodes)\r\n        console.log(\"Nodes\", nodes)\r\n\r\n        const links = [];\r\n    \r\n        filteredCellCorrelation.forEach((item, idx) => {\r\n            const source = Object.keys(filteredCellCorrelation[0])[idx];\r\n            Object.keys(item).forEach(key => {\r\n                if (key !== 'id' && item[key] === 1) {\r\n                    links.push({ source, target: key, value: 1 });\r\n                }\r\n            });\r\n        });\r\n\r\n    console.log(links)\r\n    //setLinks(links)\r\n    //}, [filteredCellCorrelation]);\r\n    \r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <h2>Cell Network</h2>\r\n            <hr />\r\n            <Tabs\r\n                defaultActiveKey=\"detail\"\r\n                id=\"file-info\"\r\n                className=\"mb-3\"\r\n                activeKey={key}\r\n                onSelect={(k) => setKey(k)}\r\n                justify\r\n                >\r\n                <Tab eventKey=\"detail\" title=\"Detail\">\r\n                    <Row>\r\n                        <Col xs={3}>\r\n                            <div className='border border-dark'>\r\n                                <h4 className=\"text-center bg-danger\">SETTINGS</h4>\r\n                                    <div className='m-3'>\r\n                                        <Typography gutterBottom>Threshold:</Typography>\r\n                                       \r\n                                        <Slider\r\n                                            value={cellThreshold.toFixed(2)}\r\n                                            getAriaLabel={() => 'Threshold'}\r\n                                            step={0.01}\r\n                                            marks={marks}\r\n                                            min={0}\r\n                                            max={1}\r\n                                            valueLabelDisplay=\"on\"\r\n                                            onChange={(event) => setCellThreshold(event.target.value)}\r\n                                        />\r\n                                    </div>\r\n                                    <div className='m-2 border-dark'>\r\n                                        <FormGroup>\r\n                                            <FormControlLabel \r\n                                                value=\"nodeLabels\"\r\n                                                control={<Switch defaultChecked />} \r\n                                                label=\"Show node labels\"\r\n                                                labelPlacement=\"start\" />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className='m-2 border-dark'>\r\n                                    <ButtonGroup orientation=\"vertical\" aria-label=\"Vertical button group\">\r\n                                        {buttons}\r\n                                    </ButtonGroup>\r\n                                    </div>\r\n                            </div>\r\n                        </Col>\r\n                        <Col xs={8}>\r\n                            <div className='border border-dark'>\r\n                                <NetworkGraph nodes={nodes} links = {links} />\r\n                            </div>\r\n                        </Col>\r\n                    \r\n                    </Row>\r\n                </Tab>\r\n                <Tab eventKey=\"data\" title=\"Data\">\r\n                    {/* {cellCorrelation.map((row) => (\r\n                        <h5>{row.B}</h5>\r\n                    ))} */}\r\n                    {cellCorrelation.length > 0 ? (\r\n                        <DataTable\r\n                            columns={columns}\r\n                            data={cellCorrelation}\r\n                            pagination\r\n                            paginationPerPage={10}\r\n                            paginationRowsPerPageOptions={[5, 10, 15, 20]}\r\n                        />\r\n) : (\r\n                        <div>Loading...</div>\r\n                    )}\r\n                </Tab>\r\n                <Tab eventKey=\"column\" title=\"Column\">\r\n                    <ul>\r\n                        {columnNames.map((value, index) => (\r\n                            <li key={index}>{value}</li>\r\n                        ))}\r\n                    </ul>\r\n                </Tab>\r\n            </Tabs>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default File5;\r\n"],"names":["_ref","nodes","links","svgRef","useRef","useEffect","console","log","svg","d3","current","width","attr","height","simulation","force","id","d","link","append","selectAll","data","enter","node","call","on","event","active","alphaTarget","restart","fx","x","fy","y","text","source","target","remove","_jsx","ref","File5","buttons","Button","children","key","setKey","useState","cellThreshold","setCellThreshold","columnNames","setColumnNames","cellCorrelation","setCellCorrelation","filteredCellCorrelation","setFilteredCellCorrelation","fetch","then","response","Papa","header","skipEmptyLines","complete","results","parsedData","map","row","convertedRow","value","isNaN","trim","parseFloat","toFixed","columns","length","Object","keys","name","selector","sortable","applyThreshold","threshold","validFloatValues","flatMap","obj","values","filter","reduce","sum","calculateMean","item","updatedItem","Array","isArray","filteredColnames","group","forEach","idx","push","_jsxs","Tabs","defaultActiveKey","className","activeKey","onSelect","k","justify","Tab","eventKey","title","Row","Col","xs","Typography","gutterBottom","Slider","getAriaLabel","step","marks","label","min","max","valueLabelDisplay","onChange","FormGroup","FormControlLabel","control","Switch","defaultChecked","labelPlacement","ButtonGroup","orientation","NetworkGraph","DataTable","pagination","paginationPerPage","paginationRowsPerPageOptions","index"],"sourceRoot":""}