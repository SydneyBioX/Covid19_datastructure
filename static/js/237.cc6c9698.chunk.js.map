{"version":3,"file":"static/js/237.cc6c9698.chunk.js","mappings":"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","sources":["components/NetworkGraph.js","details/File5.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nimport convertDataToNodeAndLinks from \"./convertDataToNodeAndLinks\"\r\n\r\n// export const RADIUS = 10;\r\n\r\nconst NetworkGraph = ({ nodes, links }) => {\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    //const { nodes, links } = convertDataToNodeAndLinks(data);\r\n\r\n    console.log(\"NODES\", nodes)\r\n    console.log(\"LINKS\", links)\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    const width = svg.attr('width');\r\n    const height = svg.attr('height');\r\n\r\n    const simulation = d3.forceSimulation(nodes)\r\n      .force('link', d3.forceLink(links).id(d => d.id))\r\n    //   .force('collide', d3.forceCollide().radius(RADIUS))\r\n      .force('charge', d3.forceManyBody())\r\n      .force('center', d3.forceCenter(width / 2, height / 2));\r\n\r\n    const link = svg.append('g')\r\n      .selectAll('line')\r\n      .data(links)\r\n      .enter().append('line')\r\n      .attr('stroke', '#999')\r\n      .attr('stroke-opacity', 0.6);\r\n\r\n    const node = svg.append('g')\r\n      .selectAll('circle')\r\n      .data(nodes)\r\n      .enter().append('circle')\r\n      .attr('r', 5)\r\n      .attr('fill', '#69b3a2')\r\n      .call(d3.drag()\r\n        .on('start', dragstarted)\r\n        .on('drag', dragged)\r\n        .on('end', dragended));\r\n\r\n    node.append('title')\r\n      .text(d => d.id);\r\n\r\n    simulation.on('tick', () => {\r\n      link\r\n        .attr('x1', d => d.source.x)\r\n        .attr('y1', d => d.source.y)\r\n        .attr('x2', d => d.target.x)\r\n        .attr('y2', d => d.target.y);\r\n\r\n      node\r\n        .attr('cx', d => d.x)\r\n        .attr('cy', d => d.y);\r\n    });\r\n\r\n    function dragstarted(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      d.fx = event.x;\r\n      d.fy = event.y;\r\n    }\r\n\r\n    function dragended(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    }\r\n\r\n    return () => {\r\n      svg.selectAll('*').remove();\r\n    };\r\n  }, [nodes, links]);\r\n\r\n  return <svg ref={svgRef} width={600} height={600} />;\r\n};\r\n\r\nexport default NetworkGraph;\r\n","// src/details/File5.js\r\nimport { useState, useEffect } from 'react';\r\nimport { Tab, Tabs, Row, Col } from 'react-bootstrap';\r\nimport DataTable from 'react-data-table-component';\r\nimport { Switch, FormControlLabel, FormGroup, Slider, Typography, Button, ButtonGroup } from '@mui/material';\r\nimport Papa from 'papaparse';\r\n\r\nimport NetworkGraph from '../components/NetworkGraph';\r\n\r\nconst File5 = () => {\r\n\r\n    const marks = [\r\n        { value: 0, label: '0' },\r\n        { value: 0.25, label: '0.25' },\r\n        { value: 0.5, label: '0.5' },\r\n        { value: 0.75, label: '0.75' },\r\n        { value: 1, label: '1' },\r\n      ];\r\n\r\n    const buttons = [\r\n        <Button key=\"graph\">Graph</Button>,\r\n        <Button key=\"sankey\">Sankey</Button>,\r\n        <Button key=\"edgeBunding\">Edge Bundling</Button>,\r\n    ];  \r\n\r\n    // Function to calculate the mean of all values in a 2D array\r\n    const calculateMean = (data) => {\r\n        // Extract float values from the objects\r\n        const floatValues = data.flatMap(obj => {\r\n            return Object.values(obj).map(value => parseFloat(value));\r\n        });\r\n\r\n        // Filter out NaN values in case of any parsing issues\r\n        const validFloatValues = floatValues.filter(value => !isNaN(value));\r\n\r\n        // Calculate the total sum of the float values\r\n        const total = validFloatValues.reduce((sum, value) => sum + value, 0);\r\n\r\n        // Calculate and return the mean\r\n        return total / validFloatValues.length;\r\n    };\r\n\r\n    // Function to apply the threshold logic\r\n    const applyThreshold = (data, threshold) => {\r\n        return data.map(item => {\r\n            const updatedItem = {};\r\n            for (const key in item) {\r\n              updatedItem[key] = item[key] > threshold ? 1 : 0;\r\n            }\r\n            return updatedItem;\r\n          });\r\n    };\r\n\r\n    const [key, setKey] = useState('detail');\r\n    const [cellThreshold, setCellThreshold] = useState(0);\r\n    const [columnNames, setColumnNames] = useState([]);\r\n    const [cellCorrelation, setCellCorrelation] = useState([]);\r\n    const [filteredCellCorrelation, setFilteredCellCorrelation] = useState([]);\r\n    //const [nodes, setNodes] = useState([]);\r\n    //const [links, setLinks] = useState({});\r\n\r\n    useEffect(() => {\r\n        fetch('/Covid19_datastructure/data/celltype_correlation.csv')\r\n            .then((response) => response.text())\r\n            .then((text) => {\r\n                Papa.parse(text, {\r\n                    header: true,\r\n                    skipEmptyLines: true,\r\n                    complete: (results) => {\r\n                        const parsedData = results.data.map(row => {\r\n                            const convertedRow = {};\r\n                            for (const key in row) {\r\n                                const value = row[key];\r\n                                if (!isNaN(value) && value.trim() !== '') {\r\n                                  convertedRow[key] = parseFloat(value).toFixed(4);\r\n                                } else {\r\n                                  convertedRow[key] = value;\r\n                                }\r\n                            }\r\n                            return convertedRow;\r\n                          });\r\n\r\n                        setCellCorrelation(parsedData);\r\n                        \r\n                    },\r\n                });\r\n            });\r\n    }, []);\r\n\r\n    const columns = cellCorrelation.length > 0 ? Object.keys(cellCorrelation[0]).map(header => ({\r\n        name: header,\r\n        selector: row => row[header],\r\n        sortable: true,\r\n    })) : [];\r\n\r\n    useEffect(() => {\r\n        setCellThreshold(calculateMean(cellCorrelation))\r\n        setColumnNames(cellCorrelation.length > 0 ? Object.keys(cellCorrelation[0]).map(header => header): [])\r\n        setFilteredCellCorrelation(applyThreshold(cellCorrelation, cellThreshold));\r\n    }, [cellThreshold, cellCorrelation]);\r\n\r\n    console.log(Array.isArray(cellCorrelation));\r\n    console.log(cellCorrelation);\r\n    console.log(\"Cell Threshold\", cellThreshold);\r\n    console.log(\"Column\", columns);\r\n    console.log(Array.isArray(columns));\r\n    console.log(\"columnNames\", columnNames);\r\n    console.log(filteredCellCorrelation);\r\n    const filteredColnames = filteredCellCorrelation.length > 0 ? Object.keys(filteredCellCorrelation[0]).map(header => header): []\r\n    console.log(\"Filtered colnames\", filteredColnames)\r\n\r\n    //useEffect(() => {\r\n        const nodes = filteredCellCorrelation.length > 0 ? Object.keys(filteredCellCorrelation[0]).map(item => ({ id: item, group: 'group1' })):[]\r\n        //setNodes(nodes)\r\n        console.log(\"Nodes\", nodes)\r\n\r\n        const links = [];\r\n    \r\n        filteredCellCorrelation.forEach((item, idx) => {\r\n            const source = Object.keys(filteredCellCorrelation[0])[idx];\r\n            Object.keys(item).forEach(key => {\r\n                if (key !== 'id' && item[key] === 1) {\r\n                    links.push({ source, target: key, value: 1 });\r\n                }\r\n            });\r\n        });\r\n\r\n    console.log(links)\r\n    //setLinks(links)\r\n    //}, [filteredCellCorrelation]);\r\n    \r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <h2>Cell Network</h2>\r\n            <hr />\r\n            <Tabs\r\n                defaultActiveKey=\"detail\"\r\n                id=\"file-info\"\r\n                className=\"mb-3\"\r\n                activeKey={key}\r\n                onSelect={(k) => setKey(k)}\r\n                justify\r\n                >\r\n                {/* <Tab eventKey=\"detail\" title=\"Detail\">\r\n                    <Row>\r\n                        <Col xs={3}>\r\n                            <div className='border border-dark'>\r\n                                <h4 className=\"text-center bg-danger\">SETTINGS</h4>\r\n                                    <div className='m-3'>\r\n                                        <Typography gutterBottom>Threshold:</Typography>\r\n                                       \r\n                                        <Slider\r\n                                            value={cellThreshold.toFixed(2)}\r\n                                            getAriaLabel={() => 'Threshold'}\r\n                                            step={0.01}\r\n                                            marks={marks}\r\n                                            min={0}\r\n                                            max={1}\r\n                                            valueLabelDisplay=\"on\"\r\n                                            onChange={(event) => setCellThreshold(event.target.value)}\r\n                                        />\r\n                                    </div>\r\n                                    <div className='m-2 border-dark'>\r\n                                        <FormGroup>\r\n                                            <FormControlLabel \r\n                                                value=\"nodeLabels\"\r\n                                                control={<Switch defaultChecked />} \r\n                                                label=\"Show node labels\"\r\n                                                labelPlacement=\"start\" />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className='m-2 border-dark'>\r\n                                    <ButtonGroup orientation=\"vertical\" aria-label=\"Vertical button group\">\r\n                                        {buttons}\r\n                                    </ButtonGroup>\r\n                                    </div>\r\n                            </div>\r\n                        </Col>\r\n                        <Col xs={8}>\r\n                            <div className='border border-dark'>\r\n                                <NetworkGraph nodes={nodes} links = {links} />\r\n                            </div>\r\n                        </Col>\r\n                    \r\n                    </Row>\r\n                </Tab> */}\r\n                <Tab eventKey=\"data\" title=\"Data\">\r\n                    {/* {cellCorrelation.map((row) => (\r\n                        <h5>{row.B}</h5>\r\n                    ))} */}\r\n                    {cellCorrelation.length > 0 ? (\r\n                        <DataTable\r\n                            columns={columns}\r\n                            data={cellCorrelation}\r\n                            pagination\r\n                            paginationPerPage={10}\r\n                            paginationRowsPerPageOptions={[5, 10, 15, 20]}\r\n                        />\r\n) : (\r\n                        <div>Loading...</div>\r\n                    )}\r\n                </Tab>\r\n                <Tab eventKey=\"column\" title=\"Column\">\r\n                    <ul>\r\n                        {columnNames.map((value, index) => (\r\n                            <li key={index}>{value}</li>\r\n                        ))}\r\n                    </ul>\r\n                </Tab>\r\n            </Tabs>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default File5;\r\n"],"names":["File5","Button","key","setKey","useState","cellThreshold","setCellThreshold","columnNames","setColumnNames","cellCorrelation","setCellCorrelation","filteredCellCorrelation","setFilteredCellCorrelation","useEffect","fetch","then","response","text","Papa","header","skipEmptyLines","complete","results","parsedData","data","map","row","convertedRow","value","isNaN","trim","parseFloat","toFixed","columns","length","Object","keys","name","selector","sortable","applyThreshold","threshold","validFloatValues","flatMap","obj","values","filter","reduce","sum","calculateMean","item","updatedItem","console","log","Array","isArray","filteredColnames","nodes","id","group","links","forEach","idx","source","push","target","_jsxs","children","_jsx","Tabs","defaultActiveKey","className","activeKey","onSelect","k","justify","Tab","eventKey","title","DataTable","pagination","paginationPerPage","paginationRowsPerPageOptions","index"],"sourceRoot":""}